<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>gencode.c</FILENAME><LINE>36</LINE><COLUMN>17</COLUMN></SFA><DEFECTCODE>6063</DEFECTCODE><DESCRIPTION>缺少“fprintf”的字符串参数(对应于转换说明符“1”)。</DESCRIPTION><FUNCTION>makepcode</FUNCTION><DECORATED>makepcode</DECORATED><FUNCLINE>32</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>gencode.c</FILENAME><LINE>36</LINE><COLUMN>17</COLUMN></SFA><DEFECTCODE>6064</DEFECTCODE><DESCRIPTION>缺少“fprintf”的整型参数(对应于转换说明符“2”)。</DESCRIPTION><FUNCTION>makepcode</FUNCTION><DECORATED>makepcode</DECORATED><FUNCLINE>32</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>21</LINE><COLUMN>15</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>28</LINE><COLUMN>14</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>28</LINE><COLUMN>35</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>45</LINE><COLUMN>16</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>51</LINE><COLUMN>11</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>54</LINE><COLUMN>12</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>88</LINE><COLUMN>11</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>115</LINE><COLUMN>16</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>102</LINE><COLUMN>13</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>134</LINE><COLUMN>11</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>142</LINE><COLUMN>11</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>151</LINE><COLUMN>11</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>159</LINE><COLUMN>11</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>167</LINE><COLUMN>11</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>179</LINE><COLUMN>16</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>170</LINE><COLUMN>29</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>178</LINE><COLUMN>17</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>getsym.c</FILENAME><LINE>173</LINE><COLUMN>14</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 iswhat 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>getsym</FUNCTION><DECORATED>getsym</DECORATED><FUNCLINE>16</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>377</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6328</DEFECTCODE><DESCRIPTION>大小不匹配: 已将“int”作为 _Param_(2) 传递，但需要使用“char operand”来调用“scanf_s”。这表示可能存在严重错误。若针对像 scanf 这样的函数报告此信息，可能表示发生缓冲区不足或溢出。</DESCRIPTION><FUNCTION>interpret</FUNCTION><DECORATED>interpret</DECORATED><FUNCLINE>18</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>377</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6064</DEFECTCODE><DESCRIPTION>缺少“scanf_s”的整型参数(对应于转换说明符“2”)。</DESCRIPTION><FUNCTION>interpret</FUNCTION><DECORATED>interpret</DECORATED><FUNCLINE>18</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>66</LINE><COLUMN>22</COLUMN></SFA><DEFECTCODE>6385</DEFECTCODE><DESCRIPTION>从“stack”中读取的数据无效: 可读大小为“6000”个字节，但可能读取了“-12”个字节。</DESCRIPTION><FUNCTION>interpret</FUNCTION><DECORATED>interpret</DECORATED><FUNCLINE>18</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>20</LINE><COLUMN>5</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>20</LINE><COLUMN>7</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>20</LINE><COLUMN>9</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>22</LINE><COLUMN>14</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>24</LINE><COLUMN>6</COLUMN><KEYEVENT><ID>1</ID><KIND>声明</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>“t”等于 -1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>25</LINE><COLUMN>6</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>26</LINE><COLUMN>6</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>27</LINE><COLUMN>5</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>29</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>30</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>32</LINE><COLUMN>11</COLUMN><KEYEVENT><ID>2</ID><KIND>分支</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>假定 switch (“i.codename”)解析为 case OPR: </MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>50</LINE><COLUMN>2</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>51</LINE><COLUMN>12</COLUMN><KEYEVENT><ID>3</ID><KIND>分支</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>假定 switch (“i.i”)解析为 case RTS: </MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>58</LINE><COLUMN>3</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>60</LINE><COLUMN>9</COLUMN><KEYEVENT><ID>4</ID><KIND>别名</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>(别名)“tx”收到“t”的值(可能为 -1)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>61</LINE><COLUMN>6</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>62</LINE><COLUMN>7</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>63</LINE><COLUMN>7</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>65</LINE><COLUMN>25</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>66</LINE><COLUMN>22</COLUMN><KEYEVENT><ID>5</ID><KIND>使用情况</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>从“stack[-1]”中读取无效(可读范围是 0 到 499)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>78</LINE><COLUMN>15</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>写入到“stack”时缓冲区溢出: 可写大小为“6000”个字节，但可能写入了“-12”个字节。</DESCRIPTION><FUNCTION>interpret</FUNCTION><DECORATED>interpret</DECORATED><FUNCLINE>18</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>20</LINE><COLUMN>5</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>20</LINE><COLUMN>7</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>20</LINE><COLUMN>9</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>22</LINE><COLUMN>14</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>24</LINE><COLUMN>6</COLUMN><KEYEVENT><ID>1</ID><KIND>声明</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>“t”等于 -1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>25</LINE><COLUMN>6</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>26</LINE><COLUMN>6</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>27</LINE><COLUMN>5</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>29</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>30</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>32</LINE><COLUMN>11</COLUMN><KEYEVENT><ID>2</ID><KIND>分支</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>假定 switch (“i.codename”)解析为 case OPR: </MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>50</LINE><COLUMN>2</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>51</LINE><COLUMN>12</COLUMN><KEYEVENT><ID>3</ID><KIND>分支</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>假定 switch (“i.i”)解析为 case OPP: </MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>76</LINE><COLUMN>3</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>interpret.c</FILENAME><LINE>78</LINE><COLUMN>15</COLUMN><KEYEVENT><ID>4</ID><KIND>使用情况</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>写入到“stack[-1]”无效(可写范围是 0 到 499)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>table.c</FILENAME><LINE>18</LINE><COLUMN>9</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 check 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>entertable</FUNCTION><DECORATED>entertable</DECORATED><FUNCLINE>15</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>table.c</FILENAME><LINE>67</LINE><COLUMN>9</COLUMN></SFA><DEFECTCODE>28278</DEFECTCODE><DESCRIPTION>出现的函数 check 不带有范围内的任何原型。只能执行受限分析。包括相应的标头或添加原型。如果函数定义中省略了参数或返回类型，则也将出现此警告。</DESCRIPTION><FUNCTION>entertablearray</FUNCTION><DECORATED>entertablearray</DECORATED><FUNCLINE>64</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>test2.c</FILENAME><LINE>18</LINE><COLUMN>6</COLUMN></SFA><DEFECTCODE>6031</DEFECTCODE><DESCRIPTION>返回值被忽略:“scanf”。</DESCRIPTION><FUNCTION>main</FUNCTION><DECORATED>main</DECORATED><FUNCLINE>14</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>test2.c</FILENAME><LINE>20</LINE><COLUMN>7</COLUMN></SFA><DEFECTCODE>6054</DEFECTCODE><DESCRIPTION>可能没有为字符串“file”添加字符串零终止符。</DESCRIPTION><FUNCTION>main</FUNCTION><DECORATED>main</DECORATED><FUNCLINE>14</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>3</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>test2.c</FILENAME><LINE>16</LINE><COLUMN>6</COLUMN><KEYEVENT><ID>1</ID><KIND>声明</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>此表达式不能为“file”添加字符串零终止符</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>test2.c</FILENAME><LINE>17</LINE><COLUMN>7</COLUMN></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>test2.c</FILENAME><LINE>18</LINE><COLUMN>6</COLUMN><KEYEVENT><ID>2</ID><KIND>声明</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>“file”是“scanf”中的输出(在 d:\应用\mircosoft visual studio 2012\vc\include\stdio.h:290 处声明)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>test2.c</FILENAME><LINE>20</LINE><COLUMN>7</COLUMN><KEYEVENT><ID>3</ID><KIND>使用情况</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>“file”是对“fopen”的输入(在 d:\应用\mircosoft visual studio 2012\vc\include\stdio.h:218 处声明)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>test2.c</FILENAME><LINE>20</LINE><COLUMN>7</COLUMN><KEYEVENT><ID>4</ID><KIND>使用情况</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>“file”必须由“fopen”上的 SAL 批注添加字符串零终止符</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>d:\编译\compiler\compiler\</FILEPATH><FILENAME>syntax.c</FILENAME><LINE>865</LINE><COLUMN>29</COLUMN></SFA><DEFECTCODE>6236</DEFECTCODE><DESCRIPTION>(&lt;表达式&gt; || &lt;非零常量&gt;)始终为非零常量。</DESCRIPTION><FUNCTION>assign_sentence</FUNCTION><DECORATED>assign_sentence</DECORATED><FUNCLINE>796</FUNCLINE><PATH /></DEFECT></DEFECTS>